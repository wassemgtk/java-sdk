/*
 * SpecJson
 *
 * This file was automatically generated by Qordoba.com v2.0 ( https://apimatic.io ) on 11/30/2016
 */
package com.qordoba.developers.interfaces;

import java.util.*;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import com.qordoba.developers.models.*;

public interface QordobaInterface {
    /**
     * Creates a new project
     * @param    body    Required parameter: Project creation payload
	 * @return	Returns the void response from the API call*/
    @POST
    @Path("/api/projects")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_JSON)
    public void createProjectsAsync(
            Project body);
    /**
     * Gets an organisation's projects
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/projects")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getProjectsAsync();
    /**
     * Gets organisation workflows
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/workflows")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getWorkflowAsync();
    /**
     * Gets a workflow
     * @param    wfId    Required parameter: Your workflow ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/workflows/{wf_id}")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getWorkflowAsync(
            @PathParam("wf_id") String wfId);
    /**
     * Gets an organisation's team
     * @param    filterQuery    Required parameter: Your filter string
     * @param    limit    Required parameter: Your pagination limit
     * @param    offset    Required parameter: Your pagination offset
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/team")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getTeamAsync(
            @QueryParam("filterQuery") String filterQuery,
            @QueryParam("limit") String limit,
            @QueryParam("offset") String offset);
    /**
     * Gets a project's workflow
     * @param    languageId    Required parameter: Your language ID
     * @param    projectId    Required parameter: Your project ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/projects/{project_id}/languages/{language_id}/workflow")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getWorkflowAsync(
            @PathParam("language_id") String languageId,
            @PathParam("project_id") String projectId);
    /**
     * Gets an project's feed
     * @param    from    Required parameter: Feed source
     * @param    limit    Required parameter: Your pagination limit
     * @param    projectId    Required parameter: Your project ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/projects/{project_id}/feed")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getWorkflowAsync(
            @QueryParam("from") String from,
            @QueryParam("limit") String limit,
            @PathParam("project_id") String projectId);
    /**
     * Gets project's files
     * @param    languageId    Required parameter: Your language ID
     * @param    limit    Required parameter: Your pagination limit
     * @param    offset    Required parameter: Your pagination offset
     * @param    projectId    Required parameter: Your project ID
     * @param    searchString    Required parameter: Your search string
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/projects/{project_id}/languages/{language_id}/files")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getFilesAsync(
            @PathParam("language_id") String languageId,
            @QueryParam("limit") String limit,
            @QueryParam("offset") String offset,
            @PathParam("project_id") String projectId,
            @QueryParam("search_string") String searchString);
    /**
     * Uploads a project file
     * @param    projectId    Required parameter: Your project ID
	 * @return	Returns the void response from the API call*/
    @POST
    @Path("/api/projects/{project_id}/files")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void createFilesAsync(
            @PathParam("project_id") String projectId);
    /**
     * Downloads a project's file
     * @param    fileId    Required parameter: Your file ID
     * @param    languageId    Required parameter: Your language ID
     * @param    projectId    Required parameter: Your project ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/projects/{project_id}/languages/{language_id}/files/{file_id}")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getFilesAsync(
            @PathParam("file_id") String fileId,
            @PathParam("language_id") String languageId,
            @PathParam("project_id") String projectId);
    /**
     * Gets a file's segments
     * @param    fileId    Required parameter: Your file ID
     * @param    filter    Required parameter: Your filter string
     * @param    languageId    Required parameter: Your language ID
     * @param    limit    Required parameter: Your pagination limit
     * @param    offset    Required parameter: Your pagination offset
     * @param    projectId    Required parameter: Your project ID
     * @param    searchString    Required parameter: Your search string
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/projects/{project_id}/languages/{language_id}/files/{file_id}/segments")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getSegmentsAsync(
            @PathParam("file_id") String fileId,
            @QueryParam("filter") String filter,
            @PathParam("language_id") String languageId,
            @QueryParam("limit") String limit,
            @QueryParam("offset") String offset,
            @PathParam("project_id") String projectId,
            @QueryParam("search_string") String searchString);
    /**
     * Gets a segment
     * @param    fileId    Required parameter: Your file ID
     * @param    languageId    Required parameter: Your language ID
     * @param    projectId    Required parameter: Your project ID
     * @param    segmentId    Required parameter: Your segment ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/projects/{project_id}/languages/{language_id}/files/{file_id}/segments/{segment_id}")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getSegmentsAsync(
            @PathParam("file_id") String fileId,
            @PathParam("language_id") String languageId,
            @PathParam("project_id") String projectId,
            @PathParam("segment_id") String segmentId);
    /**
     * Updates a segment
     * @param    fileId    Required parameter: Your file ID
     * @param    languageId    Required parameter: Your language ID
     * @param    projectId    Required parameter: Your project ID
     * @param    segmentId    Required parameter: Your segment ID
	 * @return	Returns the void response from the API call*/
    @PUT
    @Path("/api/projects/{project_id}/languages/{language_id}/files/{file_id}/segments/{segment_id}")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void updateSegmentsAsync(
            @PathParam("file_id") String fileId,
            @PathParam("language_id") String languageId,
            @PathParam("project_id") String projectId,
            @PathParam("segment_id") String segmentId);
    /**
     * Adds segments to a file
     * @param    body    Required parameter: Project creation payload
     * @param    fileId    Required parameter: Your file ID
     * @param    projectId    Required parameter: Your project ID
	 * @return	Returns the void response from the API call*/
    @POST
    @Path("/api/projects/{project_id}/files/{file_id}/segments")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_JSON)
    public void createFilesAsync(
            Project body,
            @PathParam("file_id") String fileId,
            @PathParam("project_id") String projectId);
    /**
     * Creates an empty file
     * @param    fileName    Required parameter: Your file name
     * @param    projectId    Required parameter: Your project ID
	 * @return	Returns the void response from the API call*/
    @POST
    @Path("/api/projects/{project_id}/files/{file_name}")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void createFilesAsync(
            @PathParam("file_name") String fileName,
            @PathParam("project_id") String projectId);
    /**
     * Gets an organisation's translation memory
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/translation_memories")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getTmAsync();
    /**
     * Posts an organisation's translation memory
	 * @return	Returns the void response from the API call*/
    @POST
    @Path("/api/translation_memories/upload")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void createTmAsync();
    /**
     * Gets a translation memory config
     * @param    tmId    Required parameter: Your translation memory ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/translation_memories/{tm_id}/config")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getTmAsync(
            @PathParam("tm_id") String tmId);
    /**
     * Updates a translation memory config
     * @param    tmId    Required parameter: Your translation ID
	 * @return	Returns the void response from the API call*/
    @PUT
    @Path("/api/translation_memories/{tm_id}/config")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void updateTmAsync(
            @PathParam("tm_id") String tmId);
    /**
     * Gets a translation memory
     * @param    tmId    Required parameter: Your translation memory ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/translation_memories/{tm_id}")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getTm1Async(
            @PathParam("tm_id") String tmId);
    /**
     * Gets a translation memory's segments
     * @param    tmId    Required parameter: Your translation memory ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/translation_memories/{tm_id}/segments")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getTm2Async(
            @PathParam("tm_id") String tmId);
    /**
     * Posts a translation memory's term
	 * @return	Returns the void response from the API call*/
    @POST
    @Path("/api/translation_memories/add_term")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void createTm1Async();
    /**
     * Gets a translation memory's segment
     * @param    id    Required parameter: Your segment ID
     * @param    tmId    Required parameter: Your translation memory ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/translation_memories/{tm_id}/segments/{id}")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getTmAsync(
            @PathParam("id") String id,
            @PathParam("tm_id") String tmId);
    /**
     * Updates a translation memory's segment
     * @param    id    Required parameter: Your segment ID
     * @param    tmId    Required parameter: Your translation memory ID
	 * @return	Returns the void response from the API call*/
    @PUT
    @Path("/api/translation_memories/{tm_id}/segments/{id}")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void updateTmAsync(
            @PathParam("id") String id,
            @PathParam("tm_id") String tmId);
    /**
     * Deletes a translation memory's segment
     * @param    id    Required parameter: Your segment ID
     * @param    tmId    Required parameter: Your translation memory ID
	 * @return	Returns the void response from the API call*/
    @DELETE
    @Path("/api/translation_memories/{tm_id}/segments/{id}")
    @Produces(MediaType.TEXT_PLAIN)
    public void deleteTmAsync(
            @PathParam("id") String id,
            @PathParam("tm_id") String tmId);
    /**
     * Gets organization's glossaries
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/glossaries")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getGlossariesAsync();
    /**
     * Posts an organization glossary
	 * @return	Returns the void response from the API call*/
    @POST
    @Path("/api/glossaries/upload")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void createGlossariesAsync();
    /**
     * Gets a glossary's config
     * @param    glossaryId    Required parameter: Your glossary ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/glossaries/{glossary_id}/config")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getGlossariesAsync(
            @PathParam("glossary_id") String glossaryId);
    /**
     * Updates a glossary's config
     * @param    glossaryId    Required parameter: Your glossary ID
	 * @return	Returns the void response from the API call*/
    @PUT
    @Path("/api/glossaries/{glossary_id}/config")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void updateGlossariesAsync(
            @PathParam("glossary_id") String glossaryId);
    /**
     * Downloads a glossary
     * @param    glossaryId    Required parameter: Your glossary ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/glossaries/{glossary_id}/download")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getGlossaries1Async(
            @PathParam("glossary_id") String glossaryId);
    /**
     * Gets a glossary
     * @param    glossaryId    Required parameter: Your glossary ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/glossaries/{glossary_id}")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getGlossaries2Async(
            @PathParam("glossary_id") String glossaryId);
    /**
     * Gets project glossaries
     * @param    languageId    Required parameter: Your language ID
     * @param    projectId    Required parameter: Your project ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/project/{project_id}/languages/{language_id}/glossaries/terms")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getGlossariesAsync(
            @PathParam("language_id") String languageId,
            @PathParam("project_id") String projectId);
    /**
     * Posts glossary term
	 * @return	Returns the void response from the API call*/
    @POST
    @Path("/api/glossaries/add_term")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void createGlossaries1Async();
    /**
     * Gets glossary term
     * @param    glossaryId    Required parameter: Your glossary ID
     * @param    id    Required parameter: Your glossary term ID
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/glossaries/{glossary_id}/terms/{id}")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getGlossariesAsync(
            @PathParam("glossary_id") String glossaryId,
            @PathParam("id") String id);
    /**
     * Updates glossary term
     * @param    glossaryId    Required parameter: Your glossary ID
     * @param    id    Required parameter: Your glossary term ID
	 * @return	Returns the void response from the API call*/
    @PUT
    @Path("/api/glossaries/{glossary_id}/terms/{id}")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void updateGlossariesAsync(
            @PathParam("glossary_id") String glossaryId,
            @PathParam("id") String id);
    /**
     * Deletes glossary term
     * @param    glossaryId    Required parameter: Your glossary ID
     * @param    id    Required parameter: Your glossary term ID
	 * @return	Returns the void response from the API call*/
    @DELETE
    @Path("/api/glossaries/{glossary_id}/terms/{id}")
    @Produces(MediaType.TEXT_PLAIN)
    public void deleteGlossariesAsync(
            @PathParam("glossary_id") String glossaryId,
            @PathParam("id") String id);
    /**
     * Gets languages
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/languages")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getLanguagesAsync();
    /**
     * Gets countries
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/countries")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getLanguages1Async();
    /**
     * Gets regex templates
	 * @return	Returns the DynamicResponse response from the API call*/
    @GET
    @Path("/api/regextemplates")
    @Produces(MediaType.WILDCARD)
    public DynamicResponse getRegextemplatesAsync();
}